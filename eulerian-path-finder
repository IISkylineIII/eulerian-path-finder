def find_eulerian_path(graph):
    def dfs(current):
        nonlocal circuit
        for neighbor in graph.get(current, []):
            if (current, neighbor) not in visited_edges:
                visited_edges.add((current, neighbor))
                dfs(neighbor)
        circuit.append(current)

    in_degree = defaultdict(int)
    out_degree = defaultdict(int)
    visited_edges = set()

    for vertex, neighbors in graph.items():
        out_degree[vertex] += len(neighbors)
        for neighbor in neighbors:
            in_degree[neighbor] += 1

    start_vertex = 0
    for vertex in graph:
        if out_degree[vertex] - in_degree[vertex] == 1:
            start_vertex = vertex
            break

    if start_vertex == 0:
        # If all vertices have even degrees, start with any vertex
        for vertex in graph:
            if out_degree[vertex] > 0:
                start_vertex = vertex
                break

    circuit = []
    dfs(start_vertex)

    return circuit[::-1]

graph_input = {
    1: [3, 4],
    2: [1],
    4: [5],
    5: [6, 9],
    6: [1],
    7: [8],
    8: [5],
    9: [7],
}


eulerian_path = find_eulerian_path(graph_input)


print("Eulerian Path:", " ".join(map(str, eulerian_path)))
